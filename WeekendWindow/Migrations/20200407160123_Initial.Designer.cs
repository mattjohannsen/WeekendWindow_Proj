// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WeekendWindow.Data;

namespace WeekendWindow.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200407160123_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "4b473a3f-e7a4-4767-b991-3d55f51280ca",
                            ConcurrencyStamp = "d13a8e66-5969-4363-ba68-f2560ead3ebb",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "40a878a7-da48-474a-bc93-c1614400b640",
                            ConcurrencyStamp = "1a29ab01-1748-41a5-9011-02e67d266640",
                            Name = "Viewer",
                            NormalizedName = "VIEWER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("WeekendWindow.Models.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdminId");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("WeekendWindow.Models.Attitude", b =>
                {
                    b.Property<int>("AttitudeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AttitudeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AttitudeId");

                    b.ToTable("Attitude");

                    b.HasData(
                        new
                        {
                            AttitudeId = 1,
                            AttitudeName = "Party"
                        },
                        new
                        {
                            AttitudeId = 2,
                            AttitudeName = "Family"
                        },
                        new
                        {
                            AttitudeId = 3,
                            AttitudeName = "Romantic"
                        },
                        new
                        {
                            AttitudeId = 4,
                            AttitudeName = "Kids"
                        },
                        new
                        {
                            AttitudeId = 5,
                            AttitudeName = "Sight See"
                        },
                        new
                        {
                            AttitudeId = 6,
                            AttitudeName = "Culture"
                        },
                        new
                        {
                            AttitudeId = 7,
                            AttitudeName = "Relax"
                        });
                });

            modelBuilder.Entity("WeekendWindow.Models.GooglePlaces", b =>
                {
                    b.Property<int>("GooglePlacesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GooglePlacesDisplay")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GooglePlacesType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsOutdoors")
                        .HasColumnType("bit");

                    b.HasKey("GooglePlacesId");

                    b.ToTable("GooglePlaces");

                    b.HasData(
                        new
                        {
                            GooglePlacesId = 1,
                            GooglePlacesDisplay = "Amusement Park",
                            GooglePlacesType = "amusement_park",
                            IsOutdoors = true
                        },
                        new
                        {
                            GooglePlacesId = 2,
                            GooglePlacesDisplay = "Aquarium",
                            GooglePlacesType = "aquarium",
                            IsOutdoors = false
                        },
                        new
                        {
                            GooglePlacesId = 3,
                            GooglePlacesDisplay = "Art Gallery",
                            GooglePlacesType = "art_gallery",
                            IsOutdoors = false
                        },
                        new
                        {
                            GooglePlacesId = 4,
                            GooglePlacesDisplay = "Bar",
                            GooglePlacesType = "bar",
                            IsOutdoors = false
                        },
                        new
                        {
                            GooglePlacesId = 5,
                            GooglePlacesDisplay = "Bowling Alley",
                            GooglePlacesType = "bowling_alley",
                            IsOutdoors = false
                        },
                        new
                        {
                            GooglePlacesId = 6,
                            GooglePlacesDisplay = "Café",
                            GooglePlacesType = "café",
                            IsOutdoors = false
                        },
                        new
                        {
                            GooglePlacesId = 7,
                            GooglePlacesDisplay = "Campground",
                            GooglePlacesType = "campground",
                            IsOutdoors = true
                        },
                        new
                        {
                            GooglePlacesId = 8,
                            GooglePlacesDisplay = "Casino",
                            GooglePlacesType = "casino",
                            IsOutdoors = false
                        },
                        new
                        {
                            GooglePlacesId = 9,
                            GooglePlacesDisplay = "Gym",
                            GooglePlacesType = "gym",
                            IsOutdoors = false
                        },
                        new
                        {
                            GooglePlacesId = 10,
                            GooglePlacesDisplay = "Library",
                            GooglePlacesType = "library",
                            IsOutdoors = false
                        },
                        new
                        {
                            GooglePlacesId = 11,
                            GooglePlacesDisplay = "Lodging",
                            GooglePlacesType = "lodging",
                            IsOutdoors = false
                        },
                        new
                        {
                            GooglePlacesId = 12,
                            GooglePlacesDisplay = "Movie Theater",
                            GooglePlacesType = "movie_theater",
                            IsOutdoors = false
                        },
                        new
                        {
                            GooglePlacesId = 13,
                            GooglePlacesDisplay = "Museum",
                            GooglePlacesType = "museum",
                            IsOutdoors = false
                        },
                        new
                        {
                            GooglePlacesId = 14,
                            GooglePlacesDisplay = "Night Club",
                            GooglePlacesType = "night_club",
                            IsOutdoors = false
                        },
                        new
                        {
                            GooglePlacesId = 15,
                            GooglePlacesDisplay = "Park",
                            GooglePlacesType = "park",
                            IsOutdoors = true
                        },
                        new
                        {
                            GooglePlacesId = 16,
                            GooglePlacesDisplay = "Restaurant",
                            GooglePlacesType = "restaurant",
                            IsOutdoors = false
                        },
                        new
                        {
                            GooglePlacesId = 17,
                            GooglePlacesDisplay = "Shopping Mall",
                            GooglePlacesType = "shopping_mall",
                            IsOutdoors = false
                        },
                        new
                        {
                            GooglePlacesId = 18,
                            GooglePlacesDisplay = "Spa",
                            GooglePlacesType = "spa",
                            IsOutdoors = false
                        },
                        new
                        {
                            GooglePlacesId = 19,
                            GooglePlacesDisplay = "Stadium",
                            GooglePlacesType = "stadium",
                            IsOutdoors = true
                        },
                        new
                        {
                            GooglePlacesId = 20,
                            GooglePlacesDisplay = "Tourist Attraction",
                            GooglePlacesType = "tourist_attraction",
                            IsOutdoors = false
                        },
                        new
                        {
                            GooglePlacesId = 21,
                            GooglePlacesDisplay = "Zoo",
                            GooglePlacesType = "zoo",
                            IsOutdoors = true
                        });
                });

            modelBuilder.Entity("WeekendWindow.Models.GooglePlacesAttitude", b =>
                {
                    b.Property<int>("GooglePlacesAttitudeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GPAAttitudeId")
                        .HasColumnType("int");

                    b.Property<int>("GPAGooglePlacesId")
                        .HasColumnType("int");

                    b.HasKey("GooglePlacesAttitudeId");

                    b.HasIndex("GPAAttitudeId");

                    b.HasIndex("GPAGooglePlacesId");

                    b.ToTable("GooglePlacesAttitude");

                    b.HasData(
                        new
                        {
                            GooglePlacesAttitudeId = 1,
                            GPAAttitudeId = 1,
                            GPAGooglePlacesId = 1
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 2,
                            GPAAttitudeId = 2,
                            GPAGooglePlacesId = 1
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 3,
                            GPAAttitudeId = 3,
                            GPAGooglePlacesId = 1
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 4,
                            GPAAttitudeId = 4,
                            GPAGooglePlacesId = 1
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 5,
                            GPAAttitudeId = 5,
                            GPAGooglePlacesId = 1
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 6,
                            GPAAttitudeId = 6,
                            GPAGooglePlacesId = 1
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 7,
                            GPAAttitudeId = 7,
                            GPAGooglePlacesId = 1
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 8,
                            GPAAttitudeId = 2,
                            GPAGooglePlacesId = 2
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 9,
                            GPAAttitudeId = 4,
                            GPAGooglePlacesId = 2
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 10,
                            GPAAttitudeId = 5,
                            GPAGooglePlacesId = 2
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 11,
                            GPAAttitudeId = 6,
                            GPAGooglePlacesId = 2
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 12,
                            GPAAttitudeId = 7,
                            GPAGooglePlacesId = 2
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 13,
                            GPAAttitudeId = 2,
                            GPAGooglePlacesId = 3
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 14,
                            GPAAttitudeId = 4,
                            GPAGooglePlacesId = 3
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 15,
                            GPAAttitudeId = 5,
                            GPAGooglePlacesId = 3
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 16,
                            GPAAttitudeId = 6,
                            GPAGooglePlacesId = 3
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 17,
                            GPAAttitudeId = 7,
                            GPAGooglePlacesId = 3
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 18,
                            GPAAttitudeId = 1,
                            GPAGooglePlacesId = 4
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 19,
                            GPAAttitudeId = 7,
                            GPAGooglePlacesId = 4
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 20,
                            GPAAttitudeId = 1,
                            GPAGooglePlacesId = 5
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 21,
                            GPAAttitudeId = 2,
                            GPAGooglePlacesId = 5
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 22,
                            GPAAttitudeId = 4,
                            GPAGooglePlacesId = 5
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 23,
                            GPAAttitudeId = 7,
                            GPAGooglePlacesId = 5
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 24,
                            GPAAttitudeId = 3,
                            GPAGooglePlacesId = 6
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 25,
                            GPAAttitudeId = 7,
                            GPAGooglePlacesId = 6
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 26,
                            GPAAttitudeId = 1,
                            GPAGooglePlacesId = 7
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 27,
                            GPAAttitudeId = 2,
                            GPAGooglePlacesId = 7
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 28,
                            GPAAttitudeId = 4,
                            GPAGooglePlacesId = 7
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 29,
                            GPAAttitudeId = 7,
                            GPAGooglePlacesId = 7
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 30,
                            GPAAttitudeId = 1,
                            GPAGooglePlacesId = 8
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 31,
                            GPAAttitudeId = 6,
                            GPAGooglePlacesId = 8
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 32,
                            GPAAttitudeId = 7,
                            GPAGooglePlacesId = 8
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 33,
                            GPAAttitudeId = 7,
                            GPAGooglePlacesId = 9
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 34,
                            GPAAttitudeId = 2,
                            GPAGooglePlacesId = 10
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 35,
                            GPAAttitudeId = 4,
                            GPAGooglePlacesId = 10
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 36,
                            GPAAttitudeId = 6,
                            GPAGooglePlacesId = 10
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 37,
                            GPAAttitudeId = 7,
                            GPAGooglePlacesId = 10
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 38,
                            GPAAttitudeId = 2,
                            GPAGooglePlacesId = 12
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 39,
                            GPAAttitudeId = 3,
                            GPAGooglePlacesId = 12
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 40,
                            GPAAttitudeId = 4,
                            GPAGooglePlacesId = 12
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 41,
                            GPAAttitudeId = 7,
                            GPAGooglePlacesId = 12
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 42,
                            GPAAttitudeId = 2,
                            GPAGooglePlacesId = 13
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 43,
                            GPAAttitudeId = 3,
                            GPAGooglePlacesId = 13
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 44,
                            GPAAttitudeId = 4,
                            GPAGooglePlacesId = 13
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 45,
                            GPAAttitudeId = 5,
                            GPAGooglePlacesId = 13
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 46,
                            GPAAttitudeId = 6,
                            GPAGooglePlacesId = 13
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 47,
                            GPAAttitudeId = 7,
                            GPAGooglePlacesId = 13
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 48,
                            GPAAttitudeId = 1,
                            GPAGooglePlacesId = 14
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 49,
                            GPAAttitudeId = 7,
                            GPAGooglePlacesId = 14
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 50,
                            GPAAttitudeId = 2,
                            GPAGooglePlacesId = 15
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 51,
                            GPAAttitudeId = 3,
                            GPAGooglePlacesId = 15
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 52,
                            GPAAttitudeId = 4,
                            GPAGooglePlacesId = 15
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 53,
                            GPAAttitudeId = 5,
                            GPAGooglePlacesId = 15
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 54,
                            GPAAttitudeId = 7,
                            GPAGooglePlacesId = 15
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 55,
                            GPAAttitudeId = 1,
                            GPAGooglePlacesId = 16
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 56,
                            GPAAttitudeId = 2,
                            GPAGooglePlacesId = 16
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 57,
                            GPAAttitudeId = 3,
                            GPAGooglePlacesId = 16
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 58,
                            GPAAttitudeId = 4,
                            GPAGooglePlacesId = 16
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 59,
                            GPAAttitudeId = 5,
                            GPAGooglePlacesId = 16
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 60,
                            GPAAttitudeId = 6,
                            GPAGooglePlacesId = 16
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 61,
                            GPAAttitudeId = 7,
                            GPAGooglePlacesId = 16
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 62,
                            GPAAttitudeId = 2,
                            GPAGooglePlacesId = 17
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 63,
                            GPAAttitudeId = 4,
                            GPAGooglePlacesId = 17
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 64,
                            GPAAttitudeId = 7,
                            GPAGooglePlacesId = 17
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 65,
                            GPAAttitudeId = 3,
                            GPAGooglePlacesId = 18
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 66,
                            GPAAttitudeId = 7,
                            GPAGooglePlacesId = 18
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 67,
                            GPAAttitudeId = 1,
                            GPAGooglePlacesId = 19
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 68,
                            GPAAttitudeId = 2,
                            GPAGooglePlacesId = 19
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 69,
                            GPAAttitudeId = 3,
                            GPAGooglePlacesId = 19
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 70,
                            GPAAttitudeId = 4,
                            GPAGooglePlacesId = 19
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 71,
                            GPAAttitudeId = 5,
                            GPAGooglePlacesId = 19
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 72,
                            GPAAttitudeId = 6,
                            GPAGooglePlacesId = 19
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 73,
                            GPAAttitudeId = 7,
                            GPAGooglePlacesId = 19
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 74,
                            GPAAttitudeId = 1,
                            GPAGooglePlacesId = 20
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 75,
                            GPAAttitudeId = 2,
                            GPAGooglePlacesId = 20
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 76,
                            GPAAttitudeId = 3,
                            GPAGooglePlacesId = 20
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 77,
                            GPAAttitudeId = 4,
                            GPAGooglePlacesId = 20
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 78,
                            GPAAttitudeId = 5,
                            GPAGooglePlacesId = 20
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 79,
                            GPAAttitudeId = 6,
                            GPAGooglePlacesId = 20
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 80,
                            GPAAttitudeId = 7,
                            GPAGooglePlacesId = 20
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 81,
                            GPAAttitudeId = 2,
                            GPAGooglePlacesId = 1
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 82,
                            GPAAttitudeId = 3,
                            GPAGooglePlacesId = 1
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 83,
                            GPAAttitudeId = 4,
                            GPAGooglePlacesId = 1
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 84,
                            GPAAttitudeId = 5,
                            GPAGooglePlacesId = 1
                        },
                        new
                        {
                            GooglePlacesAttitudeId = 85,
                            GPAAttitudeId = 7,
                            GPAGooglePlacesId = 1
                        });
                });

            modelBuilder.Entity("WeekendWindow.Models.State", b =>
                {
                    b.Property<int>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StateAbbreviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StateName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StateId");

                    b.ToTable("State");

                    b.HasData(
                        new
                        {
                            StateId = 1,
                            StateAbbreviation = "AL",
                            StateName = "Alabama"
                        },
                        new
                        {
                            StateId = 2,
                            StateAbbreviation = "AK",
                            StateName = "Alaska"
                        },
                        new
                        {
                            StateId = 3,
                            StateAbbreviation = "AZ",
                            StateName = "Arizona"
                        },
                        new
                        {
                            StateId = 4,
                            StateAbbreviation = "AR",
                            StateName = "Arkansas"
                        },
                        new
                        {
                            StateId = 5,
                            StateAbbreviation = "CA",
                            StateName = "California"
                        },
                        new
                        {
                            StateId = 6,
                            StateAbbreviation = "CO",
                            StateName = "Colorado"
                        },
                        new
                        {
                            StateId = 7,
                            StateAbbreviation = "CT",
                            StateName = "Connecticut"
                        },
                        new
                        {
                            StateId = 8,
                            StateAbbreviation = "DE",
                            StateName = "Delaware"
                        },
                        new
                        {
                            StateId = 9,
                            StateAbbreviation = "FL",
                            StateName = "Florida"
                        },
                        new
                        {
                            StateId = 10,
                            StateAbbreviation = "GA",
                            StateName = "Georgia"
                        },
                        new
                        {
                            StateId = 11,
                            StateAbbreviation = "HI",
                            StateName = "Hawaii"
                        },
                        new
                        {
                            StateId = 12,
                            StateAbbreviation = "ID",
                            StateName = "Idaho"
                        },
                        new
                        {
                            StateId = 13,
                            StateAbbreviation = "IL",
                            StateName = "Illinois"
                        },
                        new
                        {
                            StateId = 14,
                            StateAbbreviation = "IN",
                            StateName = "Indiana"
                        },
                        new
                        {
                            StateId = 15,
                            StateAbbreviation = "IA",
                            StateName = "Iowa"
                        },
                        new
                        {
                            StateId = 16,
                            StateAbbreviation = "KS",
                            StateName = "Kansas"
                        },
                        new
                        {
                            StateId = 17,
                            StateAbbreviation = "KY",
                            StateName = "Kentucky"
                        },
                        new
                        {
                            StateId = 18,
                            StateAbbreviation = "LA",
                            StateName = "Louisiana"
                        },
                        new
                        {
                            StateId = 19,
                            StateAbbreviation = "ME",
                            StateName = "Maine"
                        },
                        new
                        {
                            StateId = 20,
                            StateAbbreviation = "MD",
                            StateName = "Maryland"
                        },
                        new
                        {
                            StateId = 21,
                            StateAbbreviation = "MA",
                            StateName = "Massachusetts"
                        },
                        new
                        {
                            StateId = 22,
                            StateAbbreviation = "MI",
                            StateName = "Michigan"
                        },
                        new
                        {
                            StateId = 23,
                            StateAbbreviation = "MN",
                            StateName = "Minnesota"
                        },
                        new
                        {
                            StateId = 24,
                            StateAbbreviation = "MS",
                            StateName = "Mississippi"
                        },
                        new
                        {
                            StateId = 25,
                            StateAbbreviation = "MO",
                            StateName = "Missouri"
                        },
                        new
                        {
                            StateId = 26,
                            StateAbbreviation = "MT",
                            StateName = "Montana"
                        },
                        new
                        {
                            StateId = 27,
                            StateAbbreviation = "NE",
                            StateName = "Nebraska"
                        },
                        new
                        {
                            StateId = 28,
                            StateAbbreviation = "NV",
                            StateName = "Nevada"
                        },
                        new
                        {
                            StateId = 29,
                            StateAbbreviation = "NH",
                            StateName = "New Hampshire"
                        },
                        new
                        {
                            StateId = 30,
                            StateAbbreviation = "NJ",
                            StateName = "New Jersey"
                        },
                        new
                        {
                            StateId = 31,
                            StateAbbreviation = "NM",
                            StateName = "New Mexico"
                        },
                        new
                        {
                            StateId = 32,
                            StateAbbreviation = "NY",
                            StateName = "New York"
                        },
                        new
                        {
                            StateId = 33,
                            StateAbbreviation = "NC",
                            StateName = "North Carolina"
                        },
                        new
                        {
                            StateId = 34,
                            StateAbbreviation = "ND",
                            StateName = "North Dakota"
                        },
                        new
                        {
                            StateId = 35,
                            StateAbbreviation = "OH",
                            StateName = "Ohio"
                        },
                        new
                        {
                            StateId = 36,
                            StateAbbreviation = "OK",
                            StateName = "Oklahoma"
                        },
                        new
                        {
                            StateId = 37,
                            StateAbbreviation = "OR",
                            StateName = "Oregon"
                        },
                        new
                        {
                            StateId = 38,
                            StateAbbreviation = "PA",
                            StateName = "Pennsylvania"
                        },
                        new
                        {
                            StateId = 39,
                            StateAbbreviation = "RI",
                            StateName = "Rhode Island"
                        },
                        new
                        {
                            StateId = 40,
                            StateAbbreviation = "SC",
                            StateName = "South Carolina"
                        },
                        new
                        {
                            StateId = 41,
                            StateAbbreviation = "SD",
                            StateName = "South Dakota"
                        },
                        new
                        {
                            StateId = 42,
                            StateAbbreviation = "TN",
                            StateName = "Tennessee"
                        },
                        new
                        {
                            StateId = 43,
                            StateAbbreviation = "TX",
                            StateName = "Texas"
                        },
                        new
                        {
                            StateId = 44,
                            StateAbbreviation = "UT",
                            StateName = "Utah"
                        },
                        new
                        {
                            StateId = 45,
                            StateAbbreviation = "VT",
                            StateName = "Vermont"
                        },
                        new
                        {
                            StateId = 46,
                            StateAbbreviation = "VA",
                            StateName = "Virginia"
                        },
                        new
                        {
                            StateId = 47,
                            StateAbbreviation = "WA",
                            StateName = "Washington"
                        },
                        new
                        {
                            StateId = 48,
                            StateAbbreviation = "WV",
                            StateName = "West Virginia"
                        },
                        new
                        {
                            StateId = 49,
                            StateAbbreviation = "WI",
                            StateName = "Wisconsin"
                        },
                        new
                        {
                            StateId = 50,
                            StateAbbreviation = "WY",
                            StateName = "Wyoming"
                        },
                        new
                        {
                            StateId = 51,
                            StateAbbreviation = "DC",
                            StateName = "District of Columbia"
                        });
                });

            modelBuilder.Entity("WeekendWindow.Models.TravelRadius", b =>
                {
                    b.Property<int>("TravelRadiusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RadiumMeters")
                        .HasColumnType("int");

                    b.Property<int>("RadiusMiles")
                        .HasColumnType("int");

                    b.HasKey("TravelRadiusId");

                    b.ToTable("TravelRadius");

                    b.HasData(
                        new
                        {
                            TravelRadiusId = 1,
                            RadiumMeters = 1600,
                            RadiusMiles = 1
                        },
                        new
                        {
                            TravelRadiusId = 2,
                            RadiumMeters = 8000,
                            RadiusMiles = 5
                        },
                        new
                        {
                            TravelRadiusId = 3,
                            RadiumMeters = 16000,
                            RadiusMiles = 10
                        },
                        new
                        {
                            TravelRadiusId = 4,
                            RadiumMeters = 50000,
                            RadiusMiles = 30
                        });
                });

            modelBuilder.Entity("WeekendWindow.Models.Viewer", b =>
                {
                    b.Property<int>("ViewerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HomeLocationId")
                        .HasColumnType("int");

                    b.Property<string>("IdentityUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotificationDay")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ViewerId");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("Viewers");
                });

            modelBuilder.Entity("WeekendWindow.Models.ViewerLocation", b =>
                {
                    b.Property<int>("ViewerLocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("ViewerIsHomeLocation")
                        .HasColumnType("bit");

                    b.Property<string>("ViewerLocationAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ViewerLocationCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ViewerLocationLat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ViewerLocationLong")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ViewerLocationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ViewerLocationStateId")
                        .HasColumnType("int");

                    b.Property<int>("ViewerLocationViewerId")
                        .HasColumnType("int");

                    b.Property<string>("ViewerLocationZip")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ViewerLocationId");

                    b.HasIndex("ViewerLocationStateId");

                    b.HasIndex("ViewerLocationViewerId");

                    b.ToTable("ViewerLocation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WeekendWindow.Models.Admin", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId");
                });

            modelBuilder.Entity("WeekendWindow.Models.GooglePlacesAttitude", b =>
                {
                    b.HasOne("WeekendWindow.Models.Attitude", "Attitude")
                        .WithMany()
                        .HasForeignKey("GPAAttitudeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WeekendWindow.Models.GooglePlaces", "GooglePlaces")
                        .WithMany()
                        .HasForeignKey("GPAGooglePlacesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WeekendWindow.Models.Viewer", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId");
                });

            modelBuilder.Entity("WeekendWindow.Models.ViewerLocation", b =>
                {
                    b.HasOne("WeekendWindow.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("ViewerLocationStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WeekendWindow.Models.Viewer", "Viewer")
                        .WithMany()
                        .HasForeignKey("ViewerLocationViewerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
